name: Build and Package

on:
  push:
    tags: [ v* ]
# Only trigger when a commit is pushed with tag starts with v.

env:
  packageName: githubactspackage-1.0-SNAPSHOT.jar
  appName: Test Hello
  appDir: app
  linuxCategory: Game
  linuxPackageName: test-hello
  version: 1.1.91
  vendor: etkmlm
  javaVersion: 17
  javaSource: zulu

jobs:
  check-cache:
    name: Check JAR Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{steps.get-cache.outputs.cache-hit}}
    steps: 
      - id: get-cache
        uses: actions/cache/restore@v4
        with:
          path: target/${{env.packageName}}
          key: jarpack-${{env.version}}
          enableCrossOsArchive: true
      - run: echo "${{github.ref_name}}"
  build:
    name: Build and Create JAR File
    needs: [check-cache]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        if: needs.check-cache.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
      - name: Install Java
        if: needs.check-cache.outputs.cache-hit != 'true'
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jdk+fx
          cache: 'maven'
      - name: Build
        if: needs.check-cache.outputs.cache-hit != 'true'
        run: mvn clean package shade:shade
      - name: Cache JAR
        id: cache
        if: always() && needs.check-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: target/${{env.packageName}}
          key: jarpack-${{env.version}}
          enableCrossOsArchive: true
  pack-deb-linux:
    needs: [build]
    name: Pack JAR For Linux
    if: false
    runs-on: ubuntu-latest
    steps:
      - name: Install jpackage Dependencies
        run: sudo apt-get update && sudo apt-get install -y libgtk-3-dev fakeroot dpkg-dev
      - name: Get Cached JAR
        id: get-cache
        uses: actions/cache/restore@v4
        with:
          path: target/${{env.packageName}}
          key: jarpack-${{env.version}}
          enableCrossOsArchive: true
      - name: Install Java JRE
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jre+fx
      - name: Clone JRE Path
        id: jre-clone
        run: echo "path=$JAVA_HOME" >> $GITHUB_OUTPUT
      - name: Install Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jdk+fx
      - name: Prepare Files
        run: mkdir app && cp "target/${{env.packageName}}" app/main.jar
      - name: Run jpackage
        run: >
          ${{env.JAVA_HOME}}/bin/jpackage
          --name "${{env.appName}}"
          --type deb
          --input "${{env.appDir}}"
          --main-jar main.jar
          --runtime-image "${{steps.jre-clone.outputs.path}}"
          --app-version "${{env.version}}"
          --vendor "$vendor"
          --java-options "'-Duser.dir=\$APPDIR'"
          --linux-menu-group "${{env.linuxCategory}}"
      - name: Get JAR Name
        id: get-jar
        run: echo "file=$( ls -Art | tail -n 1 )" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-package-${{env.version}}
          path: ${{steps.get-jar.outputs.file}}
  pack-exe-windows:
    needs: [build]
    if: false
    name: Pack JAR For Windows
    runs-on: windows-latest
    env:
      JDK_HOME: java/jdk
      JRE_HOME: java/jre
      ZULU_OS: windows
      ZULU_ARCH: x64
      ZULU_TYPE: zip
    steps:
      - name: Get JAR Cache
        id: get-cache
        uses: actions/cache/restore@v4
        with:
          path: target/${{env.packageName}}
          key: jarpack-${{env.version}}
          enableCrossOsArchive: true
      - name: Install Java JRE
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jre+fx
      - name: Clone JRE Path
        id: jre-clone
        shell: bash
        run: echo "path=$JAVA_HOME" >> $GITHUB_OUTPUT
      - name: Install Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jdk+fx
      - name: Copy Files
        run: mkdir app && copy "target/${{env.packageName}}" app/main.jar
      - name: Run jpackage
        run: >
          ${{env.JAVA_HOME}}\bin\jpackage.exe
          --name "${{env.appName}}"
          --type msi
          --input "${{env.appDir}}"
          --runtime-image "${{steps.jre-clone.outputs.path}}"
          --main-jar main.jar
          --app-version "${{env.version}}"
          --vendor "${{env.vendor}}"
          --java-options "'-Duser.dir=`$APPDIR'"
          --win-dir-chooser
          --win-menu --win-menu-group "${{env.appName}}"
      - name: Get JAR Name
        id: get-jar
        shell: bash
        run: echo "file=$( ls -Art | tail -n 1 )" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-package-${{env.version}}
          path: ${{steps.get-jar.outputs.file}}
  pack-dmg-macos-old:
    needs: [build]
    if: false
    name: Pack JAR For MacOS Non Apple Silicon
    runs-on: macos-13
    steps:
      - name: Get Cache
        id: get-cache
        uses: actions/cache/restore@v4
        with:
          path: target/${{env.packageName}}
          key: jarpack-${{env.version}}
          enableCrossOsArchive: true
      - name: Install Java JRE
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jre+fx
      - name: Clone JRE Path
        id: jre-clone
        run: echo "path=$JAVA_HOME" >> $GITHUB_OUTPUT
      - name: Install Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jdk+fx
      - name: Copy Files
        run: mkdir app && cp "target/${{env.packageName}}" app/main.jar
      - name: Run jpackage
        shell: bash
        run: >
          ${{env.JAVA_HOME}}/bin/jpackage
          --name "${{env.appName}}"
          --type dmg
          --input "${{env.appDir}}"
          --main-jar main.jar
          --runtime-image "${{steps.jre-clone.outputs.path}}"
          --app-version "${{env.version}}"
          --vendor "${{env.vendor}}"
          --java-options "'-Duser.dir=\$APPDIR'"
          --mac-package-name "${{env.appName}}"
      - name: Get JAR Name
        id: get-jar
        run: echo "file=$( ls -Art | tail -n 1 )" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-old-package-${{env.version}}
          path: ${{steps.get-jar.outputs.file}}
  pack-dmg-macos:
    needs: [build]
    if: false
    name: Pack JAR For MacOS Apple Silicon
    runs-on: macos-latest
    steps:
      - name: Get Cache
        id: get-cache
        uses: actions/cache/restore@v4
        with:
          path: target/${{env.packageName}}
          key: jarpack-${{env.version}}
          enableCrossOsArchive: true
      - name: Install Java JRE
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jre+fx
      - name: Clone JRE Path
        id: jre-clone
        run: echo "path=$JAVA_HOME" >> $GITHUB_OUTPUT
      - name: Install Java JDK
        uses: actions/setup-java@v4
        with:
          distribution: ${{env.javaSource}}
          java-version: ${{env.javaVersion}}
          java-package: jdk+fx
      - name: Copy Files
        run: mkdir app && cp "target/${{env.packageName}}" app/main.jar
      - name: Run jpackage
        shell: bash
        run: >
          ${{env.JAVA_HOME}}/bin/jpackage
          --name "${{env.appName}}"
          --type dmg
          --input "${{env.appDir}}"
          --main-jar main.jar
          --runtime-image "${{steps.jre-clone.outputs.path}}"
          --app-version "${{env.version}}"
          --vendor "${{env.vendor}}"
          --java-options "'-Duser.dir=\$APPDIR'"
          --mac-package-name "${{env.appName}}"
      - name: Get JAR Name
        id: get-jar
        run: echo "file=$( ls -Art | tail -n 1 )" >> $GITHUB_OUTPUT
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-package-${{env.version}}
          path: ${{steps.get-jar.outputs.file}}
  
